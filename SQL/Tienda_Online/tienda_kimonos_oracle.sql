
-- ===========================================
-- Script Oracle: Tienda de Kimonos - Clientes y Pedidos
-- ===========================================

-- 1. Crear las tablas con claves primarias y foráneas
CREATE TABLE Clientes (
    id_cliente NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    nombre VARCHAR2(50) NOT NULL,
    email VARCHAR2(100) UNIQUE NOT NULL,
    direccion VARCHAR2(150)
);

CREATE TABLE Pedidos (
    id_pedido NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    id_cliente NUMBER NOT NULL,
    fecha_pedido DATE DEFAULT SYSDATE,
    modelo_kimono VARCHAR2(50),
    talla VARCHAR2(10),
    color VARCHAR2(30),
    cantidad NUMBER,
    FOREIGN KEY (id_cliente) REFERENCES Clientes(id_cliente)
);

-- 2. Insertar datos de ejemplo
INSERT INTO Clientes (nombre, email, direccion) VALUES ('Sakura Yamamoto', 'sakura@correo.com', 'Calle A, Kyoto');
INSERT INTO Clientes (nombre, email, direccion) VALUES ('Hiro Tanaka', 'hiro@correo.com', 'Calle B, Osaka');
INSERT INTO Clientes (nombre, email, direccion) VALUES ('Aiko Suzuki', 'aiko@correo.com', 'Calle C, Tokyo');

INSERT INTO Pedidos (id_cliente, modelo_kimono, talla, color, cantidad)
VALUES (1, 'Kimono Tradicional', 'M', 'Rojo', 2);
INSERT INTO Pedidos (id_cliente, modelo_kimono, talla, color, cantidad)
VALUES (2, 'Kimono Moderno', 'L', 'Negro', 1);
INSERT INTO Pedidos (id_cliente, modelo_kimono, talla, color, cantidad)
VALUES (3, 'Kimono Infantil', 'S', 'Azul', 3);

-- 3. Procedimiento para insertar cliente
CREATE OR REPLACE PROCEDURE Insertar_Cliente (
    p_nombre IN VARCHAR2,
    p_email IN VARCHAR2,
    p_direccion IN VARCHAR2
)
IS
BEGIN
    INSERT INTO Clientes (nombre, email, direccion)
    VALUES (p_nombre, p_email, p_direccion);
EXCEPTION
    WHEN DUP_VAL_ON_INDEX THEN
        DBMS_OUTPUT.PUT_LINE('Error: El email ya existe.');
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error general al insertar cliente: ' || SQLERRM);
END;
/

-- 4. Procedimiento para insertar pedido
CREATE OR REPLACE PROCEDURE Insertar_Pedido (
    p_id_cliente IN NUMBER,
    p_modelo IN VARCHAR2,
    p_talla IN VARCHAR2,
    p_color IN VARCHAR2,
    p_cantidad IN NUMBER
)
IS
BEGIN
    INSERT INTO Pedidos (id_cliente, modelo_kimono, talla, color, cantidad)
    VALUES (p_id_cliente, p_modelo, p_talla, p_color, p_cantidad);
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al insertar pedido: ' || SQLERRM);
END;
/

-- 5. Procedimiento para buscar clientes por nombre
CREATE OR REPLACE PROCEDURE Buscar_Cliente_Nombre (
    p_nombre IN VARCHAR2
)
IS
BEGIN
    FOR r IN (
        SELECT * FROM Clientes
        WHERE LOWER(nombre) LIKE LOWER('%' || p_nombre || '%')
    )
    LOOP
        DBMS_OUTPUT.PUT_LINE('Cliente: ' || r.nombre || ' - Email: ' || r.email);
    END LOOP;
END;
/

-- 6. Procedimiento para buscar pedidos por fecha
CREATE OR REPLACE PROCEDURE Buscar_Pedidos_Fecha (
    p_fecha IN DATE
)
IS
BEGIN
    FOR r IN (
        SELECT * FROM Pedidos
        WHERE TRUNC(fecha_pedido) = TRUNC(p_fecha)
    )
    LOOP
        DBMS_OUTPUT.PUT_LINE('Pedido ID: ' || r.id_pedido || ' - Cliente ID: ' || r.id_cliente);
    END LOOP;
END;
/

-- 7. Procedimiento para actualizar la dirección de un cliente
CREATE OR REPLACE PROCEDURE Actualizar_Direccion_Cliente (
    p_id_cliente IN NUMBER,
    p_nueva_direccion IN VARCHAR2
)
IS
BEGIN
    UPDATE Clientes
    SET direccion = p_nueva_direccion
    WHERE id_cliente = p_id_cliente;
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al actualizar dirección: ' || SQLERRM);
END;
/

-- 8. Procedimiento para eliminar un pedido
CREATE OR REPLACE PROCEDURE Eliminar_Pedido (
    p_id_pedido IN NUMBER
)
IS
BEGIN
    DELETE FROM Pedidos
    WHERE id_pedido = p_id_pedido;
    DBMS_OUTPUT.PUT_LINE('Pedido eliminado correctamente.');
EXCEPTION
    WHEN OTHERS THEN
        DBMS_OUTPUT.PUT_LINE('Error al eliminar pedido: ' || SQLERRM);
END;
/
